<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://fherrera-ibanez.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://fherrera-ibanez.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-06-04T14:58:30+00:00</updated><id>https://fherrera-ibanez.github.io/feed.xml</id><title type="html">blank</title><subtitle>Personal webpage of Felipe Herrera. </subtitle><entry><title type="html">Current Control of a Two Level Voltage Source Converter with Finite Control Set MPC</title><link href="https://fherrera-ibanez.github.io/blog/2025/009-Finite-Control-Set-Model-Predictive-Control-of-the-Two-Level-Voltage-Source-Converter/" rel="alternate" type="text/html" title="Current Control of a Two Level Voltage Source Converter with Finite Control Set MPC"/><published>2025-06-02T00:00:00+00:00</published><updated>2025-06-02T00:00:00+00:00</updated><id>https://fherrera-ibanez.github.io/blog/2025/009-Finite-Control-Set-Model-Predictive-Control-of-the-Two-Level-Voltage-Source-Converter</id><content type="html" xml:base="https://fherrera-ibanez.github.io/blog/2025/009-Finite-Control-Set-Model-Predictive-Control-of-the-Two-Level-Voltage-Source-Converter/"><![CDATA[<p><strong>Disclaimer: In my work, I use MATLAB/Simulink in conjunction with the PLECS Blockset for power electronics simulation and control algorithm implementation, as these tools are widely used in academic settings. I understand that these are licensed tools and may not be accessible to everyone. Unfortunately, due to time constraints, I am currently unable to port the control algorithms to C/C++ or to open-source platforms. I may consider doing so in the future when time permits, but please understand that this will not always be possible.</strong></p> <h1 id="learning-outcomes">Learning Outcomes</h1> <ul> <li>Understand the principles of Finite Control Set Model Predictive Control (FCS-MPC).</li> <li>Learn to apply these principles to control the Two-Level Voltage Source Converter (2L-VSC).</li> </ul> <h1 id="introduction">Introduction</h1> <p><strong>Model Predictive Control (MPC)</strong> has become a widely researched topic in power electronics. In this field, two main approaches dominate: <strong>Continuous Control Set MPC (CCS-MPC)</strong> and <strong>Finite Control Set MPC (FCS-MPC)</strong>.</p> <p>The key difference lies in how they generate switching signals:</p> <ul> <li><strong>CCS-MPC</strong> uses a <strong>modulator</strong> to translate continuous control actions into switching signals.</li> <li><strong>FCS-MPC</strong>, on the other hand, <strong>directly selects switching states</strong> during the optimization process.</li> </ul> <p>Here’s a simplified overview of how FCS-MPC works:</p> <ol> <li>A <strong>mathematical model</strong> of the load connected to the converter is developed using differential equations. This model depends on the converter’s switching states.</li> <li>The model is <strong>discretized</strong> so it can run on a digital controller. It predicts how the system will behave under different switching actions.</li> <li>A <strong>cost function</strong> is defined to numerically evaluate how well each switching action performs according to control objectives.</li> </ol> <p>In early implementations of FCS-MPC, the controller <strong>evaluated all possible switching states</strong> using the cost function and selected the one that <strong>minimized</strong> it. That optimal switching state was then applied to the converter.</p> <p>Don’t worry if this sounds abstract — this is just a high-level summary. In the sections that follow, we’ll break down the core ideas and walk through the basic implementation of an FCS-MPC algorithm.</p> <p>This post is based on the paper:</p> <p><em>J. Rodriguez _et al_., “Predictive Current Control of a Voltage Source Inverter,” in _IEEE Transactions on Industrial Electronics_, vol. 54, no. 1, pp. 495-503, Feb. 2007, doi: 10.1109/TIE.2006.888802.</em></p> <h1 id="two-level-voltage-source-converter">Two-Level Voltage Source Converter</h1> <p>The 2L-VSC is the most basic inverter topology that every power electronics student learns. It consist of three legs with two switches each. The switches have two modes of operation: the <em>on</em> state and the <em>off</em> state. During the <em>on</em> state, the switch is conducting. Meanwhile, during the <em>off</em> state, the switch is blocking. To avoid the shoot-through state (which is when the two switches of one leg are in the <em>on</em> state, short-circuiting the DC-link bus), the switches operate in a complementary manner (i.e., when one switch is in the <em>on</em> state, the other is in the <em>off</em> state). The diagram of the 2L-VSC is shown in Fig. 1.</p> <div class="row justify-content-sm-center"> <div class="col-sm-8 mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/img_bp0/2L-VSC.svg" sizes="95vw"/> <img src="/assets/img/img_bp0/2L-VSC.svg" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Fig. 1 Diagram of the 2L-VSC" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> <figcaption class="caption">Fig. 1 Diagram of the 2L-VSC</figcaption> </figure> </div> </div> <p>The mathematical model of the 2L-VSC will be posed using the formulation presented in <d-cite key="mora_computationally_2019"></d-cite>. In this post, the switch states are represented by variables $u_x$ with $x \in {a,b,c}$. Considering that we have two states <em>per leg</em>, and three legs, the number of possible combinations available for the 2L-VSC (given that the switches must operate in a complementary manner) are 8. This fact is important for the operation of the FCS-MPC strategy. The complete operation of the converter can be characterized by the three-phase switching vector $\boldsymbol u_{abc} = [u_a\;u_b\;u_c]^\intercal \in \mathbb U {\triangleq} {1,0}^3$. The set $\mathbb U$ contain the eight combinations of the switching vector, and is defined as:</p> \[\mathbb U \triangleq \left\{\begin{bmatrix}0\\0\\0\end{bmatrix},\begin{bmatrix}1\\0\\0\end{bmatrix},\begin{bmatrix}0\\1\\0\end{bmatrix},\begin{bmatrix}1\\1\\0\end{bmatrix},\begin{bmatrix}0\\0\\1\end{bmatrix},\begin{bmatrix}1\\0\\1\end{bmatrix},\begin{bmatrix}0\\1\\1\end{bmatrix},\begin{bmatrix}1\\1\\1\end{bmatrix}\right\}\] <p>Until now, we have just characterized the operation of the converter. However, we are interested in the converter output voltage. Consider that an ideal <em>dc</em> voltage source is connected at the <em>dc</em> side of the converter. The <em>ac</em> side output voltage is then:</p> \[\boldsymbol v_{abc} = V_{dc}\boldsymbol u_{abc}\] <p>It is typical to transform this three-phase voltage into a two-phase voltage using the <em>Amplitude-invariant Clarke transform</em>. To do so we define the transformation as follows:</p> \[\pmb{\mathcal{T}} = \frac{2}{3}\begin{bmatrix} 1 &amp; -\frac{1}{2} &amp; -\frac{1}{2}\\ 0 &amp; \frac{\sqrt{3}}{2} &amp; \frac{-\sqrt{3}}{2} \end{bmatrix}\] <p>Then, the transformed voltage vector is $\boldsymbol v_s = \pmb{\mathcal{T}}\boldsymbol v_{abc}$. Into the eight combinations of the new transformed voltage vectors we have two zero vectors (i.e., the voltage produced is zero), and six active vectors (i.e., the voltage produced is different than zero). The different voltage vectors can be visualized in the space vector diagram shown in Fig. 2.</p> <div class="row justify-content-sm-center"> <div class="col-sm-8 mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/img_bp0/SV_diagram_2LVSC.svg" sizes="95vw"/> <img src="/assets/img/img_bp0/SV_diagram_2LVSC.svg" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Fig. 2 Space Vector diagram of the 2L-VSC" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> <figcaption class="caption">Fig. 2 Space Vector Diagram of the 2L-VSC</figcaption> </figure> </div> </div> <p>This is it for the modelling of the converter, lets go now to the control algorithm.</p> <h1 id="finite-control-set-mpc">Finite Control Set MPC</h1> <p>The idea behind FCS-MPC is simple. Predict the evolution of the load variables subjected to each switching vector of the converter, and choose the one which produce the best result based on some criteria. Until now we have not discussed the load, and we will keep it that way for now. It will be introduced briefly.</p> <p>Consider the following optimization problem:</p> \[\begin{aligned} \underset{\boldsymbol u_s \in \pmb{\mathcal{T}}\mathbb U}{\operatorname*{arg\,min}} \quad &amp; J(\boldsymbol u_s) \end{aligned}\] <p>We will be considering this simple problem for now. If you are not familiarized with this notation, it can seem a little bit daunting. Lets break it down:</p> <ol> <li>$\boldsymbol u_s$ is the optimization variable. It is the input to the problem, and its also what we can manipulate ($\boldsymbol u_s$ is the transformed three-phase switching vector $\boldsymbol u_s = \pmb{\mathcal{T}}\boldsymbol u_{abc}$).</li> <li>We have a new set $\mathbb V \triangleq \pmb{\mathcal{T}}\mathbb U$. This set contains the elements of set $\mathbb U$ multiplied by the transformation matrix $\pmb{\mathcal{T}}$.</li> <li>$J(\boldsymbol u_s)$ is the cost function. It defines the measure of how wrong or far off a solution is from what we want.</li> <li>Third we have ${\operatorname*{arg\,min}}$. This means that the output of the problem is the element of $\mathbb V$, $\boldsymbol u_s^\star$, which minimizes the cost function $J$.</li> </ol> <p>Here we aren’t considering constraints, they will be studied in future posts. To consider this example, we will now consider the load and it will be in this case a simple resistive-inductive (<em>R-L</em>) load. It consist of the series connection of a resistance and an inductor. We will not go into the details of the load modelling, as it will be assumed known knowledge. The dynamics of the load currents are defined by the following differential equation:</p> \[\frac{\boldsymbol di_s}{dt} = -\frac{R}{L}\boldsymbol i_s + \underbrace{\frac{V_{dc}}{L}\boldsymbol u_s}_{\frac{1}{L}\boldsymbol v_s}\] <p>Where $\boldsymbol i_s = [i_{s\alpha}\;i_{s\beta}]^\intercal \in \mathbb R^2$ is the load current, <em>R</em> is the load resistance, <em>L</em> is the load inductance, and $V_{dc}$ is the <em>dc</em>-link voltage. The algorithm requires a discretization of this differential equation. For this there are several methods, however, we will just consider <em>Forward Euler</em>:</p> \[\frac{d\boldsymbol x(t)}{dt} \approx \frac{\boldsymbol x_{k+1}-\boldsymbol x_k}{T_s}\] <p>Where $T_s$ is the step size or sampling interval. Applying this into the dynamics of the load current we obtain:</p> \[\boldsymbol i_{s,k+1} = \left(1-\frac{R}{L}T_s\right)\boldsymbol i_{s,k} + \frac{V_{dc}}{L}T_s\boldsymbol u_{sj,k}\] <p>Notice that now we have $\boldsymbol u_{sj,k}$. ¿What does <em>j</em> stands for there?. Well, ¿remember that the set $\mathbb U$ has eight elements (and by extension, so does set $\mathbb V$)?. Variable <em>j</em> is just the index of the elements of the set. Thus, $j\in {0,\ldots,7}$ (indexing from 0). ¿What should be the objective of our algorithm? There could be several, depending on the specific application. To keep it simple, we will just make the load current follow a given time-variable reference. To comply with this objective, our cost function is the following:</p> \[J = \lVert \boldsymbol i_{s,k+1} - \boldsymbol i_{s,k+1}^{ref}\rVert_2^2\] <p>Again, lets break this down. $\lVert \star \rVert_2^2$ is just the $\ell_2$-norm. To define it, consider the <em>n</em>-dimensional vector $\boldsymbol \zeta = \begin{bmatrix} \zeta_1 &amp; \ldots &amp; \zeta_n \end{bmatrix}$. The $\ell_2$-norm is defined as $\lVert \boldsymbol \zeta \rVert_2^2 = \zeta_1^2 + \ldots + \zeta_n^2 = \boldsymbol \zeta^\intercal \boldsymbol \zeta$. For the specific case we are seeing, this would translate to:</p> \[J = \left(i_{s\alpha,k+1} - i_{s\alpha,k+1}^{ref} \right)^2 + \left(i_{s\beta,k+1} - i_{s\beta,k+1}^{ref} \right)^2\] <p>There is a discussion about the choice of norm in the literature, we will talk a bit about in the future. The discussion is already settled by the results obtain to this date, so it will be just an informative post. Lets rewrite the cost function in terms of $\boldsymbol u_s$ replacing the dynamics of $\boldsymbol i_{s,k+1}$ into the cost function. We obtain:</p> \[J(\boldsymbol u_{sj}) = \lVert \boldsymbol u_{sj} - \boldsymbol u_{db}\rVert_2^2\] <p>Where $\boldsymbol u_{db}$ is the control action required to reach $\boldsymbol i_{s,k+1}$ from $\boldsymbol i_{s,k}$ in one time-step. It is defined as follows:</p> \[\boldsymbol u_{db} = \frac{L}{V_{dc}T_s}\left[\boldsymbol i_{s,k+1}^{ref} - \left(1-\frac{R}{L}T_s \right)\boldsymbol i_{s,k}\right]\] <p>To obtain it, just make $\boldsymbol i_{s,k+1}=\boldsymbol i_{s,k+1}^{ref}$ in the prediction equation of the load current, and solve for $\boldsymbol u_{sj,k}$. Finally, a simple flowchart implementation of the FCS-MPC discussed can be seen in Fig. 3.</p> <div class="row justify-content-sm-center"> <div class="col-sm-8 mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/img_bp0/FCSMPC_FC.svg" sizes="95vw"/> <img src="/assets/img/img_bp0/FCSMPC_FC.svg" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Fig. 3 Flow Chart of FCS-MPC Algorithm" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> <figcaption class="caption">Fig. 3 Flow Chart of the FCS-MPC algorithm</figcaption> </figure> </div> </div> <p>This flowchart is adapted from the one presented in <d-cite key="rodriguez_state_2013"></d-cite>.</p> <h1 id="simulation-results">Simulation results</h1> <p>The parameters for the load are $R = 0.5\; \Omega$, $L = 10\;mH$, $V_{dc} = 100\;V$ and the sampling frequency 10 kHz. The results with a sinusoidal reference signal are shown in Fig. 4.</p> <div class="row justify-content-sm-center"> <div class="col-sm-8 mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/img_bp0/Sinusoidal-480.webp 480w,/assets/img/img_bp0/Sinusoidal-800.webp 800w,/assets/img/img_bp0/Sinusoidal-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/img_bp0/Sinusoidal.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Fig. 4 Simulation results with sinusoidal reference" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> <figcaption class="caption">Fig. 4 Simulation results with sinusoidal reference</figcaption> </figure> </div> </div> <p>Meanwhile the results with a triangular reference signal are shown in Fig. 5.</p> <div class="row justify-content-sm-center"> <div class="col-sm-8 mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/img_bp0/Triangular-480.webp 480w,/assets/img/img_bp0/Triangular-800.webp 800w,/assets/img/img_bp0/Triangular-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/img_bp0/Triangular.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Fig. 5 Simulation results with triangular reference" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> <figcaption class="caption">Fig. 5 Simulation results with triangular reference</figcaption> </figure> </div> </div>]]></content><author><name>Felipe Herrera</name></author><summary type="html"><![CDATA[Disclaimer: In my work, I use MATLAB/Simulink in conjunction with the PLECS Blockset for power electronics simulation and control algorithm implementation, as these tools are widely used in academic settings. I understand that these are licensed tools and may not be accessible to everyone. Unfortunately, due to time constraints, I am currently unable to port the control algorithms to C/C++ or to open-source platforms. I may consider doing so in the future when time permits, but please understand that this will not always be possible.]]></summary></entry><entry><title type="html">Google Gemini updates: Flash 1.5, Gemma 2 and Project Astra</title><link href="https://fherrera-ibanez.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra/" rel="alternate" type="text/html" title="Google Gemini updates: Flash 1.5, Gemma 2 and Project Astra"/><published>2024-05-14T00:00:00+00:00</published><updated>2024-05-14T00:00:00+00:00</updated><id>https://fherrera-ibanez.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra</id><content type="html" xml:base="https://fherrera-ibanez.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra/"><![CDATA[<p>May 14, 2024[[read-time]] min read We’re introducing a series of updates across the Gemini family of models, including the new 1.5 Flash, our lightweight model for speed and efficiency, and Project Astra, our vision for the future of AI assistants. In December, we launched our first natively multimodal model Gemini 1.0 in three sizes: Ultra, Pro and Nano. Just a few months later we released 1.5 Pro, with enhanced performance and a breakthrough long context window of 1 million tokens.Developers and enterprise customers have been putting 1.5 Pro to use in incredible ways and finding its long context window, multimodal reasoning capabilities and impressive overall performance incredibly useful.We know from user feedback that some applications need lower latency and a lower cost to serve. This inspired us to keep innovating, so today, we’re introducing Gemini 1.5 Flash: a model that’s lighter-weight than 1.5 Pro, and designed to be fast and efficient to serve at scale.Both 1.5 Pro and 1.5 Flash are available in public preview with a 1 million token context window in Google AI Studio and Vertex AI. And now, 1.5 Pro is also available with a 2 million token context window via waitlist to developers using the API and to Google Cloud customers.We’re also introducing updates across the Gemini family of models, announcing our next generation of open models, Gemma 2, and sharing progress on the future of AI assistants, with Project Astra.Context lengths of leading foundation models compared with Gemini 1.5’s 2 million token capability1.5 Flash is the newest addition to the Gemini model family and the fastest Gemini model served in the API. It’s optimized for high-volume, high-frequency tasks at scale, is more cost-efficient to serve and features our breakthrough long context window.While it’s a lighter weight model than 1.5 Pro, it’s highly capable of multimodal reasoning across vast amounts of information and delivers impressive quality for its size.The new Gemini 1.5 Flash model is optimized for speed and efficiency, is highly capable of multimodal reasoning and features our breakthrough long context window.1.5 Flash excels at summarization, chat applications, image and video captioning, data extraction from long documents and tables, and more. This is because it’s been trained by 1.5 Pro through a process called “distillation,” where the most essential knowledge and skills from a larger model are transferred to a smaller, more efficient model.Read more about 1.5 Flash in our updated Gemini 1.5 technical report, on the Gemini technology page, and learn about 1.5 Flash’s availability and pricing.Over the last few months, we’ve significantly improved 1.5 Pro, our best model for general performance across a wide range of tasks.Beyond extending its context window to 2 million tokens, we’ve enhanced its code generation, logical reasoning and planning, multi-turn conversation, and audio and image understanding through data and algorithmic advances. We see strong improvements on public and internal benchmarks for each of these tasks.1.5 Pro can now follow increasingly complex and nuanced instructions, including ones that specify product-level behavior involving role, format and style. We’ve improved control over the model’s responses for specific use cases, like crafting the persona and response style of a chat agent or automating workflows through multiple function calls. And we’ve enabled users to steer model behavior by setting system instructions.We added audio understanding in the Gemini API and Google AI Studio, so 1.5 Pro can now reason across image and audio for videos uploaded in Google AI Studio. And we’re now integrating 1.5 Pro into Google products, including Gemini Advanced and in Workspace apps.Read more about 1.5 Pro in our updated Gemini 1.5 technical report and on the Gemini technology page.Gemini Nano is expanding beyond text-only inputs to include images as well. Starting with Pixel, applications using Gemini Nano with Multimodality will be able to understand the world the way people do — not just through text, but also through sight, sound and spoken language.Read more about Gemini 1.0 Nano on Android.Today, we’re also sharing a series of updates to Gemma, our family of open models built from the same research and technology used to create the Gemini models.We’re announcing Gemma 2, our next generation of open models for responsible AI innovation. Gemma 2 has a new architecture designed for breakthrough performance and efficiency, and will be available in new sizes.The Gemma family is also expanding with PaliGemma, our first vision-language model inspired by PaLI-3. And we’ve upgraded our Responsible Generative AI Toolkit with LLM Comparator for evaluating the quality of model responses.Read more on the Developer blog.As part of Google DeepMind’s mission to build AI responsibly to benefit humanity, we’ve always wanted to develop universal AI agents that can be helpful in everyday life. That’s why today, we’re sharing our progress in building the future of AI assistants with Project Astra (advanced seeing and talking responsive agent).To be truly useful, an agent needs to understand and respond to the complex and dynamic world just like people do — and take in and remember what it sees and hears to understand context and take action. It also needs to be proactive, teachable and personal, so users can talk to it naturally and without lag or delay.While we’ve made incredible progress developing AI systems that can understand multimodal information, getting response time down to something conversational is a difficult engineering challenge. Over the past few years, we’ve been working to improve how our models perceive, reason and converse to make the pace and quality of interaction feel more natural.Building on Gemini, we’ve developed prototype agents that can process information faster by continuously encoding video frames, combining the video and speech input into a timeline of events, and caching this information for efficient recall.By leveraging our leading speech models, we also enhanced how they sound, giving the agents a wider range of intonations. These agents can better understand the context they’re being used in, and respond quickly, in conversation.With technology like this, it’s easy to envision a future where people could have an expert AI assistant by their side, through a phone or glasses. And some of these capabilities are coming to Google products, like the Gemini app and web experience, later this year.We’ve made incredible progress so far with our family of Gemini models, and we’re always striving to advance the state-of-the-art even further. By investing in a relentless production line of innovation, we’re able to explore new ideas at the frontier, while also unlocking the possibility of new and exciting Gemini use cases.Learn more about Gemini and its capabilities. Your information will be used in accordance with Google’s privacy policy.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      Done. Just one step more.
    
      Check your inbox to confirm your subscription.
    You are already subscribed to our newsletter.
    You can also subscribe with a
    different email address
    
    .
    
  Let’s stay in touch. Get the latest news from Google in your inbox.
          Follow Us
</code></pre></div></div>]]></content><author><name></name></author><summary type="html"><![CDATA[We’re sharing updates across our Gemini family of models and a glimpse of Project Astra, our vision for the future of AI assistants.]]></summary></entry><entry><title type="html">Displaying External Posts on Your al-folio Blog</title><link href="https://fherrera-ibanez.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog/" rel="alternate" type="text/html" title="Displaying External Posts on Your al-folio Blog"/><published>2022-04-23T23:20:09+00:00</published><updated>2022-04-23T23:20:09+00:00</updated><id>https://fherrera-ibanez.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog</id><content type="html" xml:base="https://fherrera-ibanez.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog/"><![CDATA[<h3>External Posts on Your al-folio Blog</h3> <p>If you prefer publishing blog posts on medium.com or other external sources, starting version v0.5.0, <a href="https://github.com/alshedivat/al-folio">al-folio</a> lets you to display your external posts in the blog feed of your website! 🎉🎉</p> <p>Configuring external sources of super simple. After upgrading to v0.5.0, just add the following section to your _config.yml:</p> <pre>external_sources:<br />  - name: medium.com  # name of the source (arbitrary string)<br />    rss_url: <a href="https://medium.com/@al-folio/feed">https://medium.com/@&lt;your-medium-username&gt;/feed</a></pre> <p>The example above adds your medium.com blog post feed as an external source. But you can add arbitrary RSS feeds as sources.</p> <p>Any questions or suggestions? 👉 Start <a href="https://github.com/alshedivat/al-folio/discussions">a discussion on GitHub</a>!</p> <p><img src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=b60a1d241a0a" width="1" height="1" alt=""/></p>]]></content><author><name></name></author></entry></feed>